import logging
import os
import asyncio
import asyncpg
import requests
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7449909716:AAEzwNAzh85-IwsNgRTB90d6NVl8OoCqB8c"
DATABASE_URL = "postgresql://telegrambot_gxyd_user:0YNcGzqKz6D2UCdEQTaLsvuSqDhOatLy@dpg-cvk0cr0gjchc73c6grf0-a/telegrambot_gxyd"
EXCHANGE_API_URL = "https://api.exchangerate-api.com/v4/latest/USD"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

logging.basicConfig(level=logging.INFO)

# –ü—Ä–∏–∫–ª–∞–¥ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
tovary = [
    {"name": "–°—Ç—ñ–ª –¥–µ—Ä–µ–≤'—è–Ω–∏–π", "price": 2500, "description": "–ú—ñ—Ü–Ω–∏–π –¥—É–±–æ–≤–∏–π —Å—Ç—ñ–ª."},
    {"name": "–°—Ç—ñ–ª–µ—Ü—å –æ—Ñ—ñ—Å–Ω–∏–π", "price": 1200, "description": "–ó—Ä—É—á–Ω–∏–π —Å—Ç—ñ–ª–µ—Ü—å –¥–ª—è —Ä–æ–±–æ—Ç–∏."},
    {"name": "–î–∏–≤–∞–Ω –∫—É—Ç–æ–≤–∏–π", "price": 8000, "description": "–í–µ–ª–∏–∫–∏–π —ñ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –¥–∏–≤–∞–Ω."}
]

async def create_db():
    pool = await asyncpg.create_pool(DATABASE_URL)
    async with pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT,
                item_name TEXT,
                price INT
            )
        """)
    await pool.close()

@router.message(F.text.in_({'/start', '/help'}))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")],
            [KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –º–µ–±–ª—ñ–≤!", reply_markup=keyboard)

@router.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def show_products(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{item['name']} - {item['price']} –≥—Ä–Ω", callback_data=f"buy_{item['name']}")]
        for item in tovary
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("buy_"))
async def order_product(callback: types.CallbackQuery):
    item_name = callback.data[4:]
    item = next((x for x in tovary if x['name'] == item_name), None)
    if item:
        pool = await asyncpg.create_pool(DATABASE_URL)
        async with pool.acquire() as conn:
            await conn.execute("INSERT INTO orders (telegram_id, item_name, price) VALUES ($1, $2, $3)",
                               callback.from_user.id, item['name'], item['price'])
        await pool.close()
        await callback.message.answer(f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ: {item['name']} - {item['price']} –≥—Ä–Ω")
        await callback.answer()
    else:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@router.message(F.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç")
async def exchange_rates(message: types.Message):
    response = requests.get(EXCHANGE_API_URL).json()
    usd_to_uah = response['rates']['UAH']
    eur_to_uah = response['rates']['UAH'] / response['rates']['EUR']
    await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç:\nüíµ 1 USD = {usd_to_uah:.2f} –≥—Ä–Ω\nüí∂ 1 EUR = {eur_to_uah:.2f} –≥—Ä–Ω")

# –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–∏—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@router.message()
async def handle_unknown_messages(message: types.Message):
    if message.photo:
        await message.answer("–î—è–∫—É—é –∑–∞ —Ñ–æ—Ç–æ! –ê–ª–µ —è –æ–±—Ä–æ–±–ª—è—é —Ç—ñ–ª—å–∫–∏ –∫–æ–º–∞–Ω–¥–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –º–µ–±–ª—è–º–∏ —Ç–∞ –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç.")
    else:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —è–∫ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–∏!")

async def main():
    await create_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
