import logging
import os
import asyncpg
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import setup_application
from aiohttp import web

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("7449909716:AAEzwNAzh85-IwsNgRTB90d6NVl8OoCqB8c")
DATABASE_URL = os.getenv("postgresql://telegrambot_gxyd_user:0YNcGzqKz6D2UCdEQTaLsvuSqDhOatLy@dpg-cvk0cr0gjchc73c6grf0-a/telegrambot_gxyd")
EXCHANGE_API_URL = "https://api.exchangerate-api.com/v4/latest/USD"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
tovary = [
    {"name": "–°—Ç—ñ–ª –¥–µ—Ä–µ–≤'—è–Ω–∏–π", "price": 2500, "description": "–ú—ñ—Ü–Ω–∏–π –¥—É–±–æ–≤–∏–π —Å—Ç—ñ–ª."},
    {"name": "–°—Ç—ñ–ª–µ—Ü—å –æ—Ñ—ñ—Å–Ω–∏–π", "price": 1200, "description": "–ó—Ä—É—á–Ω–∏–π —Å—Ç—ñ–ª–µ—Ü—å –¥–ª—è —Ä–æ–±–æ—Ç–∏."},
    {"name": "–î–∏–≤–∞–Ω –∫—É—Ç–æ–≤–∏–π", "price": 8000, "description": "–í–µ–ª–∏–∫–∏–π —ñ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –¥–∏–≤–∞–Ω."}
]

async def create_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        pool = await asyncpg.create_pool(DATABASE_URL)
        async with pool.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT,
                    item_name TEXT,
                    price INT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """)
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Database initialization error: {e}")
        raise

async def on_startup(app: web.Application):
    """–î—ñ—ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞"""
    await bot.set_webhook(f"{os.getenv('https://tg-bot-4pr.onrender.com')}/webhook")
    await create_db()

@router.message(F.text.in_({'/start', '/help'}))
async def send_welcome(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ /start —Ç–∞ /help"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")],
            [KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("ü™ë –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –º–µ–±–ª—ñ–≤!", reply_markup=keyboard)

@router.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def show_products(message: types.Message):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{item['name']} - {item['price']} –≥—Ä–Ω", 
         callback_data=f"buy_{item['name']}")]
        for item in tovary
    ])
    await message.answer("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("buy_"))
async def process_purchase(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä—É"""
    item_name = callback.data[4:]
    item = next((x for x in tovary if x['name'] == item_name), None)
    
    if not item:
        return await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    try:
        pool = await asyncpg.create_pool(DATABASE_URL)
        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO orders (telegram_id, item_name, price) VALUES ($1, $2, $3)",
                callback.from_user.id, item['name'], item['price']
            )
        await callback.message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ: {item['name']} - {item['price']} –≥—Ä–Ω")
    except Exception as e:
        logger.error(f"Database error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    finally:
        await pool.close()
        await callback.answer()

@router.message(F.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç")
async def convert_currency(message: types.Message):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(EXCHANGE_API_URL).json()
        usd_rate = response['rates']['UAH']
        eur_rate = response['rates']['UAH'] / response['rates']['EUR']
        await message.answer(
            f"üìà –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å:\n"
            f"üá∫üá∏ 1 USD = {usd_rate:.2f} UAH\n"
            f"üá™üá∫ 1 EUR = {eur_rate:.2f} UAH"
        )
    except Exception as e:
        logger.error(f"Exchange API error: {e}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç")

@router.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    if message.photo:
        await message.answer("üì∏ –î—è–∫—É—é –∑–∞ —Ñ–æ—Ç–æ! –ê–ª–µ —è –æ–±—Ä–æ–±–ª—è—é —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏.")
    else:
        await message.answer("‚ùå –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!")

async def webhook_handler(request: web.Request):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤"""
    url = str(request.url)
    update = await request.json()
    await dp.feed_webhook_update(bot, update, drop_pending_updates=True)
    return web.Response()

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∞
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ä—Ç—É Render
    port = int(os.environ.get("PORT", 8000))
    web.run_app(app, host="0.0.0.0", port=port)
